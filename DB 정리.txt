DB
1. DML ,DDL, DCL 구분
DML : Select, Insert, Delete, Update

DDL : Create, Alter, Drop, Rename, Truncate

DCL : Grant, Revoke

TCL : Commit, Rollback, Savepoint




2. select from where and order by group by 실행 순서
FROM 절
WHERE 절
GROUP BY 절
HAVING 절
SELECT 절
ORDER BY 절
각 단계의 동작은 다음과 같습니다.
FROM 절: 조회할 테이블을 지정하고, Join을 실행하여 하나의 가상 테이블로 결합합니다.
WHERE 절: 데이터 추출 조건을 확인합니다.
GROUP BY 절: 특정 칼럼으로 데이터를 그룹화합니다.
HAVING 절: 그룹화 이후 데이터 추출 조건을 확인합니다.
SELECT 절: 데이터를 추출합니다.
ORDER BY 절: 정렬합니다.



3. select 중복 제거
DISTINCT의 경우에는 SELECT DISTINCT {컬럼명} FROM {테이블명} {조건절} 의 형태로 쓰면 되고,
GROUP BY의 경우에는 SELECT {컬럼명} FROM {테이블명} {조건절} GROUP BY {테이블명} 의 형태로 쓰면 된다.


4. 집계 함수 종료
SUM 함수: SUM 함수는 숫자 데이터의 합계를 계산합니다. 주로 숫자형 열에서 사용되며, NULL 값을 제외하고 합계를 계산합니다.

AVG 함수: AVG 함수는 숫자 데이터의 평균을 계산합니다. 숫자형 열에서 사용되며, NULL 값을 제외하고 평균을 계산합니다.

COUNT 함수: COUNT 함수는 행의 개수를 계산합니다. 열이나 테이블에서 사용될 수 있으며, NULL 값을 포함한 모든 행의 개수를 반환합니다.

MAX 함수: MAX 함수는 숫자나 문자열 데이터의 최댓값을 반환합니다. 숫자형 열이나 문자열 열에서 사용될 수 있으며, NULL 값을 제외한 최댓값을 반환합니다.

MIN 함수: MIN 함수는 숫자나 문자열 데이터의 최솟값을 반환합니다. 숫자형 열이나 문자열 열에서 사용될 수 있으며, NULL 값을 제외한 최솟값을 반환합니다.

GROUP_CONCAT 함수: GROUP_CONCAT 함수는 문자열 데이터를 그룹화하여 하나의 문자열로 결합합니다. 그룹 내에서 문자열을 결합하고, 구분자를 지정하여 결과를 반환합니다.

DISTINCT 함수: DISTINCT 함수는 중복된 값을 제거한 후 유일한 값을 반환합니다. 주로 집계 함수와 함께 사용되어 그룹화된 데이터에서 중복을 제거한 결과를 얻을 수 있습니다.


5. MySQL 기준 varchar, char 차이점
CHAR는 말 그대로 고정형입니다.

ex) CHAR(8)로 선언 시 글자를 한 개를 넣든 두 개를 넣든 8바이트의 공간을 차지합니다.



VARCHAR는 반대로 가변형 문자열이기 때문에 데이터의 길이에 따라서 가변적으로 길이가 정해집니다.

ex) VARCHAR(8)로 선언 시 글자를 한 개를 넣으면 1바이트, 2개를 넣으면 2바이트의 공간을 유동적으로 차지합니다.

※ VARCHAR = variable + char



CHAR는 경우에 따라 데이터가 낭비될 수 있지만 추후 연산이 필요 없기 때문에 검색속도 및 읽히는 속도가 VARCHAR에 비해 빠르다는 장점이 있습니다. 글자 수가 고정되는 경우에 사용하면 데이터를 보다 효율적으로 관리할 수 있습니다.

ex) 주민등록번호, 전화번호, 사원번호 등



VARCHAR는 입력받은 데이터의 크기가 작을 경우, 그 크기만큼만 메모리를 차지하므로 메모리 사용량을 줄일 수 있다는 장점이 있습니다.



또한 VARCHAR는 insert나 update가 있을 때 현재 자신이 차지하고 있는 영역이 얼마인지 확인하고, 부족한 경우 더 할당하고 남으면 줄여서 insert합니다. 하지만 CHAR는 고정된 길이의 값을 넣는 것이기 때문에 일단 밀어 넣고, 남는 부분을 공백으로 채우게 됩니다.


6.              SQL vs NoSQL
	                        MySQL (RDBMS)	NoSQL (Non-Relational DB)
데이터 저장 방식	행(Row) & 열(Column) 기반	 키-값(Key-Value), 그래프(Graph) 등
데이터 구조	    고정된 테이블 구조 (스키마)	                 유연한 데이터 구조
쿼리 언어	                SQL 사용              SQL이 아닌 다양한 API 기반
확장성	            수직 확장 (Scale-up)            	수평 확장 (Scale-out)
트랜잭션	        ACID 보장 (데이터 무결성 유지)	        보장 약함 (일부 지원)
사용 예시	금융 거래, 쇼핑몰 주문 관리	빅데이터         실시간 데이터 처리

7. 개념모델링, 논리모델링, 물리모델링 개요, 구분
1. 개념 데이터 모델링
전사의 정보요건을 표현한 상위수준의 모델로서,
(1) 주요 엔터티타입, 기본 속성, 관계, 주요 업무기능 등을 포함한다.
(2) 모든 업무 영역을 포함하고, 주제 영역에 포함되는 중심 엔터티타입 간의 관계를 파악하여 주요 업무 규칙을 정의한다.
(3) 논리 데이터 모델의 기초가 된다.

2. 논리 데이터 모델링
개념모델로부터 업무영역의 업무 데이터 및 규칙을 구체적으로 표현한 모델로서,
(1) 모든 업무용 엔터티타입, 속성, 관계, 프로세스 등을 포함한다.
(2) 모든 업무 데이터를 정규화(Normalization) 하여 모델링한다.
(3) 모든 업무 규칙과 관계를 완전하고 정확하게 표현한다.
(4) 성능 혹은 기타 제약 사항과는 독립적인 모델로서, 특정 DBMS로부터 독립적이라 할 수 있다.


3. 물리 데이터 모델링
설계단계에서 시스템의 설계적 및 정보 요건을 정확하고 완전하게 표현한 모델로서,
(1) 데이터베이스 생성을 위한 물리 구조로 변환한다.
(2) 시스템 설계 요건 반영을 위한 아래와 같은 오브젝트를 추가한다.
  (가) 설계용 엔터티 타입
  (나) 설계용 속성
(3) 설계와 성능을 고려한 조정을 수행한다.
  (가) 적용 DBMS 특성 고려
  (나) 엔터티 타입의 분리 또는 통합 검토
  (다) 반정규화(Denormalization)
  (라) 관계의 해제
(4) 적용 DBMS에 적합한 성능조정을 수행한다.
  (가) 인덱스 추가 및 조정
  (나) 테이블 스페이스 조정
  (다) 인덱스 스페이스 조정


8. 제1, 2, 3 정규화 개요, 구분
제1 정규화
관계형 데이터베이스의 테이블이 1NF이면 최소한 테이블은 관계이며, 중복되는 항목이 없어야 합니다
애트리뷰트의 도메인이 오직 원자값만을 포함하고, 튜플의 모든 애트리뷰트가 도메인에 속하는 하나의 값을 가져야 합니다

제2 정규화
제1 정규화를 만족한 테이블에 대해 완전 함수 종속을 만족하도록 테이블을 분해하는 방식입니다
현재 테이블의 주제와 관련없는 컬럼을 다른 테이블로 빼는 것을 제2정규화라고 합니다

제3 정규화
제2 정규화를 만족한 테이블에 대해 이행적 함수 종속이 없도록 테이블을 분해 하는 방식입니다
테이블에서 일반 컬럼에만 종속된 컬럼을 다른 테이블로 빼는 것을 제3 정규화라고 합니다

9. transaction level isolation  개요, 구분


10. foreign key, primary key 개요, 구분
PK의 특징
모든 레코드가 서로 다른 값을 가지고 있어 각 레코드를 식별할 수 있다.
NULL값이 존재할 수 없다.
레코드의 값은 중복이 불가능하다.
테이블에는 하나의 기본키만 가질 수 있지만 경우에 따라 1개 이상의 기본키를 정의할 수도 있다. (다수 열 기본 키, 복합 기본 키)

FK의 특징
외부 키는 한 테이블의 필드로, 다른 테이블의 기본 를 나타낸다.
외래 키를 가지고 있는 테이블을 하위 테이블, 기본 키를 가지고 있는 테이블을 참조 이블 또는 상위 테이블이라고 한다.
각 외부 키와 기본 키는 1:1관계로 매칭되어야 하며, 기본 키에 존재하지 않는 값이 외부키에 존재할 수 없다. -> 외래 키 제한 표현으로 데이터베이스에게 두 테이블 간의 관계를 알려주어야 한다.


HTML, CSS, JavaScript
1. HTML semantic tag 개요, 구분
우선 ‘시맨틱(semantic)’ 이라는 단어는 무엇을 의미할까요?

시맨틱 단어 그 자체에는 ‘의미의, 의미론적인’ 라는 뜻이 담겨있습니다. 이로 유추해보았을 때, 시맨틱 태그는 태그 내용에 의미를 부여하는 태그라고 할 수 있습니다. 시맨틱 태그는  웹 페이지에 보이는 것 이상의 정보를 제공합니다.
시맨틱 태그의 요소로는 <header>, <nav>, <article>, <section>, <footer>, <main> 등이 존재
태그에 의미를 부여함으로써 웹사이트의 구조를 파악하기 쉽도록 도와주기 위해
 HTML5에서는 시맨틱 태그의 등장으로 좀 더 명시적이면서 직관적인 구조의 설계가 가능해진 것 입니다.

2. input type 구분
input type의 종류
text: 한 줄의 텍스트를 입력할 수 있는 텍스트 상자
password: 비밀번호를 입력할 수 있는 필드로, 입력된 내용이 공개되지 않도록 마스킹 처리됩니다
hidden: 사용자에게는 보이지 않지만 서버로 넘겨지는 값을 가집니다
submit: 입력 폼에 입력된 폼 데이터를 서버로 제출합니다


3. form 태그의 속성
FORM 태그 속성
폼 태그 속성에는 name, action, method, target 등이 있습니다.

폼 속성을 이용하여 전송할 때 어디로 보내야 하는지 그리고 어떤 방법으로 보낼지 정합니다.



1. action

- 폼 내부에 입력 값들 전송하는(받는사람) 서버 측 URL을 지정합니다.

- 데이터를 보내려면 브라우저가 전송 위치(URL)를 알아야 하기 때문에 이를 위해 action 속성을 사용합니다.



2. name

- 전송될 데이터의 이름



3. accept-charset

- 폼 전송에 사용할 문자 인코딩을 지정합니다.



4. target

- action에서 지정한 스크립트 파일을 현재 창이 아닌 다른 위치에 열도록 지정합니다.



5. method (디폴트 값 = get)

- 서버로 데이터를 전송하는 방식입니다.

- get 방식 or post 방식이 있습니다.



    1) get 방식

    - <form method = "get"> & 링크 &  URL 직접 & 자바스크립트 등등

    - URL의 끝에 데이터를 첨부해서 전송하는 방식

    문제점

    - 항상 노출이 된다. (보안에 중요한 데이터는 사용 금지)

    - URL 최대 256자까지 (오버플로우 : 데이터 잘림)

    - URL은 인코딩 방식이 base64(한글포함x)

    - 되도록 영문과 숫자 정도만 전송



    2) post 방식

    - post 방식 : <form method = "post"> 유일

    - 패킷의 본문 안에 데이터를 넣어서 전송하는 방식(FM 제대로 된 방식)

    - 데이터 노출이 없음(보안상 조금 더 안전)

    - 제한 크기 무제한

    - 한글 상관없이 전송



6. enctype

- 인코딩 타입을 지정합니다. 이 속성에 의해 브라우저는 입력된 데이터를 서버로 보낼 때 어떤 타입으로 인코딩해야 하는지 알 수 있는데 다음과 같이 세 가지 중 하나는 지정해줍니다.

   1) enctype="application/x-www-form-urlencoded"

   서버에 보내기 전에 모든 문자를 인코딩하는 방식이며 폼에 텍스트 데이터를 포함했을 때 지정합니다.(기본값)

   2. enctype="multipart/form-data"

   파일 업로드 컨트롤처럼 문자가 아닌 파일을 전송할 때 사용됩니다.

   3. enctype="text/plain"

   일반 텍스트로 인코딩 됩니다.



7. novalidate

- novalidate 속성은 HTML5에 새롭게 추가된 속성으로서, 유효성 미확인을 지정합니다.

이 속성을 지정하면 폼에 입력된 데이터를 서버로 보낼 때 데이터를 체크하지 않습니다
