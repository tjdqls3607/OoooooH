오버플로우
타입이 허용하는 최대값을 벗어나는 것

언더플로우
타입이 허용하는 최소값을 벗어나는 것

정수 연산
math라이브러리에는 어떤 함수들이 존재하는지

문자열을 비교할 떄는 동등(==. !=) 연산자 대신 equals()와 !equals()를 사용 하는 이유 - 메모리의 위치를 비교하기 위해서
문자열 타입은 reference type이기 떄문에 스택영역에 변수가 저장되는 것이 아니라 heap영역에 저장되기 때문에
변수에는 heap 메모리의 위치가 저장되어 있다.

논리연산자
AND : && 또는 &
OR : || 또는 |
왜 두개짜리랑 하나가 나뉘는지 -> 이미 전체 판명이 나더라도 나머지 판명을 이어간다. 결과적으로 y도 13이 된다.

XOR 은 값 두개가 서로 달라야됨
ex) true false == true
ex) false true == true
ex) true true == false
ex) false false == false

복합대입 연산자 중에논리 및 비트이동 연산자 예제 만들어서 해보기


//&& -> ||
			if (++x == 13 || y++ == 12) {
				System.out.println("E");
			}else {
				 System.out.println("F");
			}

			result : 13
                     12

||는 or 에서 왼쪽의 식이 참으로 성립되면 뒤의 식은 생략한다

3항 연산자에서 다중 조건이 있다면
char grade = score > 90 ? 'A' : ((score >= 80 ) ? 'B' : 'C');
