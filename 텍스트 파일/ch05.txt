참조타입 원시타입 자세한 설명

레퍼런스 타입과 원시타입의 차이점에 대해서 워크샵때 진행

스택메모리가 만들어 지는 순간은 a메소드가 선언됐을때 이후 사라지는 순간은 함수가 } 로 닫혔을 때

참조 타입에서(==, !=) 연산
if(mc1 == mc2){}  일때 == 는 heap에 같은 번지수인지 비교한다.

문자열을 수정할때 새로운 객체가 생성된다

배열
연속된 공간에 값을 나열시키고, 각 값에 인덱스를 부여해 놓은 자료구조

배열 변수 선언
두 가지 형태로 작성, 첫 번째가 관례적인 표기
타입[] 변수;  타입 변수[]
이  두가지의 차이점 - 워크샵

배열은 힙 영역에 생성되고 배열 변수는 힙 영역의 배열 주소를 저장
참조할 배열이 없다면 배열 변수도 null로 초기화할 수 있다.

타입[] 변수 = {값0~~~~...};
변수 = new 타입[] {값0~~~~~};

	        System.out.println(intArray);
			System.out.println(intArray2);
			System.out.println(intArray3);
			System.out.println(intArray4);

			이 코드의 결과값이
			[I@65ae6ba4
            [I@7960847b
            [I@6a6824be
            [I@5c8da962
            이렇게 되는 이유는  intArray를 호출했을때 힙 영역에 저장된 객체를 불러오지 않고
            힙 영역의 주소를 불러온다 배열은 변수들이 heap영역에 저장되기 때문이다


heap에 만들어지는 모든것들은 초기화 된다

배열로 일반적인 for문을 돌렸을때와 for-each문으로 돌렸을때 차이점

객체

객체지향과 절차지향의 차이 객체지향 언어와 절차지향 언어

캡슐화 : 객체의 데이터(필드), 동작(메소드)을 하나로 묶고 실제 구현 내용을 외부에 감추는 것

상속 : 부모 객체가 자기 필드와 메소드를 자식객체에게 물려줘 자식 객체가 사용할 수 있게 함
    -> 코드 재사용성을 높이고 유지보수 시간 최소화

다형성 : 사용 방법은 동일하지만 실행 결과가 다양함


클래스 선언

public class 클래스명
public 클래스인 클래스는 파일이름이 클래스명과 반드시 동일해야함

클래스 변수
클래스로부터 객체를 생성하려면 객체 생성 연산자인 new가 필요
new 연산자는 객체를 생성시키고 객체의 주소를 리턴

클래스 변수 = new 클래스(); 클래스는 생성자

컴파일러가 자동으로 해주는것
생성자가 없으면 기본적으로 생성자를 만들어준다
생성자가 있으면 default생성자를 만들어주지 않는다

필드 선언
필드는 클래스 블록에서 선언되어야 함
타입 필드명 [= 초기값];


다른 생성자 호출
생성자 오버로딩이 많아질 경우 생성자 간의 중복된 코드가 발생할 수 있음
이 경우 공통 코드를 한 생성자에만 집중적으로 작성하고, 나머지 생성자는 this(...)를 사용해 공통 코드를 가진 생성자를 호출

this() <- 자기자신 생성자 호출
this. 이클래스의 객체가 만들어지면 그객체는 자기자신이다


return 문 메소드의 실행을 강제 종료하고 호출한 곳으로 돌아간다는 의미
메소드 선언에 리턴 타입이 있을 경우에는 return 문 뒤에 리턴값을 추가로 지정해야 함

메소드 오버로딩
메소드 이름은 같되 매개변수의 타입, 개수, 순서가 다른 메소드를 여러개 선언하는 것
메소드 시그니쳐에 대해서 자세히 <- 워크샵